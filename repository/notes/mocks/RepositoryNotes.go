// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	//testing "testing"

	mock "github.com/stretchr/testify/mock"
	notes "github.com/w33h/Productivity-Tracker-API/business/notes"
)

// RepositoryNotes is an autogenerated mock type for the RepositoryNotes type
type RepositoryNotes struct {
	mock.Mock
}

// DeleteNote provides a mock function with given fields: id
func (_m *RepositoryNotes) DeleteNote(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllNotes provides a mock function with given fields:
func (_m *RepositoryNotes) FindAllNotes() ([]notes.Notes, error) {
	ret := _m.Called()

	var r0 []notes.Notes
	if rf, ok := ret.Get(0).(func() []notes.Notes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notes.Notes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotesById provides a mock function with given fields: id
func (_m *RepositoryNotes) FindNotesById(id string) (*notes.Notes, error) {
	ret := _m.Called(id)

	var r0 *notes.Notes
	if rf, ok := ret.Get(0).(func(string) *notes.Notes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notes.Notes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotesByStatus provides a mock function with given fields: status
func (_m *RepositoryNotes) FindNotesByStatus(status string) ([]notes.Notes, error) {
	ret := _m.Called(status)

	var r0 []notes.Notes
	if rf, ok := ret.Get(0).(func(string) []notes.Notes); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notes.Notes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotesByTags provides a mock function with given fields: tags
func (_m *RepositoryNotes) FindNotesByTags(tags []string) ([]notes.Notes, error) {
	ret := _m.Called(tags)

	var r0 []notes.Notes
	if rf, ok := ret.Get(0).(func([]string) []notes.Notes); ok {
		r0 = rf(tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notes.Notes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNote provides a mock function with given fields: _a0
func (_m *RepositoryNotes) InsertNote(_a0 notes.Notes) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(notes.Notes) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(notes.Notes) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNote provides a mock function with given fields: _a0
func (_m *RepositoryNotes) UpdateNote(_a0 notes.Notes) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(notes.Notes) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryNotes creates a new instance of RepositoryNotes. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
//func NewRepositoryNotes(t testing.TB) *RepositoryNotes {
//	mock := &RepositoryNotes{}
//	mock.Mock.Test(t)
//
//	t.Cleanup(func() { mock.AssertExpectations(t) })
//
//	return mock
//}
